version: 2
jobs:
  build:
    branches:
      only:
        - master

    docker:
      - image: circleci/python:3.6.1

    working_directory: ~/repo

    steps:
      - checkout

      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "setup.py" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: create virtualenv
          command: |
            python3 -m venv venv
            . venv/bin/activate

      - run:
          name: install strong-bootcamp
          command: |
            . venv/bin/activate
            pip install .

      - run:
          name: install awscli
          command: |
            . venv/bin/activate
            pip install awscli

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "setup.py" }}

      - run:
          name: run tests
          command: |
            . venv/bin/activate
            python3 -m unittest

      - run:
          name: delete example app
          command: |
            find . -name "app/*.py" -type f -delete

      - run:
          name: build strong-bootcamp-*.tar.gz
          command: |
            mkdir artefacts
            package_version=$(python -c "from bootcamp import __version__; print(__version__)")
            tar --exclude 'venv' --exclude '.git' --exclude '.circleci' --exclude 'artefacts' -cvzf artefacts/strong-bootcamp-$package_version-dist.tar.gz .

      - run:
          name: upload release to GitHub
          command: |
            package_version=$(python -c "from bootcamp import __version__; print(__version__)")
            owner="strongio"
            repo="strong-ops"
            tag=v${package_version}
            filename="./artefacts/strong-bootcamp-${package_version}-dist.tar.gz"
            github_api_token=$GITHUB_API_TOKEN

            # Define variables.
            GH_API="https://api.github.com"
            GH_REPO="$GH_API/repos/$owner/$repo"
            GH_TAGS="$GH_REPO/releases/tags/$tag"
            AUTH="Authorization: token $github_api_token"
            WGET_ARGS="--content-disposition --auth-no-challenge --no-cookie"
            CURL_ARGS="-LJO#"

            if [[ "$tag" == 'LATEST' ]]; then
              GH_TAGS="$GH_REPO/releases/latest"
            fi

            # Validate token.
            curl -o /dev/null -sH "$AUTH" $GH_REPO || { echo "Error: Invalid repo, token or network issue!";  exit 1; }

            # Create release
            res=`curl "$GITHUB_OAUTH_BASIC" -H "Authorization: token $github_api_token" -X POST https://api.github.com/repos/${owner}/${repo}/releases \
            -d "
            {
              \"tag_name\": \"$tag\",
              \"target_commitish\": \"master\",
              \"name\": \"$tag\",
              \"body\": \"Built by CircleCI\",
              \"draft\": false,
              \"prerelease\": false
            }"`

            echo Create release result: ${res}
            release_id=`echo ${res} | python -c 'import json,sys;print(json.load(sys.stdin)["id"])'`

            # Upload asset
            echo "Uploading asset... "

            # Construct url
            GH_ASSET="https://uploads.github.com/repos/$owner/$repo/releases/$release_id/assets?name=$(basename $filename)"

            curl "$GITHUB_OAUTH_BASIC" --data-binary @"$filename" -H "Authorization: token $github_api_token" -H "Content-Type: application/octet-stream" $GH_ASSET

      - run:
          name: upload release to S3
          command: |
            . venv/bin/activate
            aws s3 cp ./artefacts/$(cd artefacts && ls | grep *.tar.gz) s3://strong-packages/ --acl public-read &&
            aws s3 cp ./artefacts/$(cd artefacts && ls | grep *.tar.gz) s3://strong-packages/strong-bootcamp-latest.tar.gz --acl public-read
